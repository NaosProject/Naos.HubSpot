// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.127.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.HubSpot.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;
    using global::System.Reflection;

    using global::FakeItEasy;

    using global::OBeautifulCode.Assertion.Recipes;
    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.CodeGen.ModelObject.Recipes;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Reflection.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Serialization.Recipes;
    using global::OBeautifulCode.Type;

    using global::Xunit;

    using static global::System.FormattableString;

    public static partial class PropertyModelV3Test
    {
        private static readonly StringRepresentationTestScenarios<PropertyModelV3> StringRepresentationTestScenarios = new StringRepresentationTestScenarios<PropertyModelV3>()
            .AddScenario(() =>
                new StringRepresentationTestScenario<PropertyModelV3>
                {
                    Name = "Default Code Generated Scenario",
                    SystemUnderTestExpectedStringRepresentationFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedStringRepresentation<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            ExpectedStringRepresentation = Invariant($"Naos.HubSpot.Domain.PropertyModelV3: GroupName = {systemUnderTest.GroupName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Hidden = {systemUnderTest.Hidden.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ModificationMetadataModel = {systemUnderTest.ModificationMetadataModel?.ToString() ?? "<null>"}, Name = {systemUnderTest.Name?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DisplayOrder = {systemUnderTest.DisplayOrder.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Options = {systemUnderTest.Options?.ToString() ?? "<null>"}, Label = {systemUnderTest.Label?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, HasUniqueValue = {systemUnderTest.HasUniqueValue.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Type = {systemUnderTest.Type?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FieldType = {systemUnderTest.FieldType?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FormField = {systemUnderTest.FormField.ToString(CultureInfo.InvariantCulture) ?? "<null>"}."),
                        };

                        return result;
                    },
                });

        private static readonly ConstructorArgumentValidationTestScenarios<PropertyModelV3> ConstructorArgumentValidationTestScenarios = new ConstructorArgumentValidationTestScenarios<PropertyModelV3>()
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'groupName' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             null,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "groupName" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentException when parameter 'groupName' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "groupName", "white space" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'modificationMetadataModel' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             null,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "modificationMetadataModel" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'name' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             null,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "name" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentException when parameter 'name' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "name", "white space" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'options' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             null,
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "options" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentException when parameter 'options' is an empty enumerable scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             new List<OptionModel>(),
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "options", "is an empty enumerable" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentException when parameter 'options' contains a null element scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             new OptionModel[0].Concat(referenceObject.Options).Concat(new OptionModel[] { null }).Concat(referenceObject.Options).ToList(),
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "options", "contains at least one null element" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'label' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             null,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "label" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentException when parameter 'label' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "label", "white space" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'type' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             null,
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "type" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentException when parameter 'type' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.HasUniqueValue,
                                             referenceObject.FieldType,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "type", "white space" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentNullException when parameter 'fieldType' is null scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             null,
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentNullException),
                    ExpectedExceptionMessageContains = new[] { "fieldType" },
                })
            .AddScenario(() =>
                new ConstructorArgumentValidationTestScenario<PropertyModelV3>
                {
                    Name = "constructor should throw ArgumentException when parameter 'fieldType' is white space scenario",
                    ConstructionFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new PropertyModelV3(
                                             referenceObject.GroupName,
                                             referenceObject.Hidden,
                                             referenceObject.ModificationMetadataModel,
                                             referenceObject.Name,
                                             referenceObject.DisplayOrder,
                                             referenceObject.Options,
                                             referenceObject.Label,
                                             referenceObject.Type,
                                             referenceObject.HasUniqueValue,
                                             Invariant($"  {Environment.NewLine}  "),
                                             referenceObject.FormField);

                        return result;
                    },
                    ExpectedExceptionType = typeof(ArgumentException),
                    ExpectedExceptionMessageContains = new[] { "fieldType", "white space" },
                });

        private static readonly ConstructorPropertyAssignmentTestScenarios<PropertyModelV3> ConstructorPropertyAssignmentTestScenarios = new ConstructorPropertyAssignmentTestScenarios<PropertyModelV3>()
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "GroupName should return same 'groupName' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.GroupName,
                        };

                        return result;
                    },
                    PropertyName = "GroupName",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "Hidden should return same 'hidden' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.Hidden,
                        };

                        return result;
                    },
                    PropertyName = "Hidden",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "ModificationMetadataModel should return same 'modificationMetadataModel' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.ModificationMetadataModel,
                        };

                        return result;
                    },
                    PropertyName = "ModificationMetadataModel",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "Name should return same 'name' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.Name,
                        };

                        return result;
                    },
                    PropertyName = "Name",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "DisplayOrder should return same 'displayOrder' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.DisplayOrder,
                        };

                        return result;
                    },
                    PropertyName = "DisplayOrder",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "Options should return same 'options' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.Options,
                        };

                        return result;
                    },
                    PropertyName = "Options",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "Label should return same 'label' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.Label,
                        };

                        return result;
                    },
                    PropertyName = "Label",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "Type should return same 'type' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.Type,
                        };

                        return result;
                    },
                    PropertyName = "Type",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "HasUniqueValue should return same 'hasUniqueValue' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.HasUniqueValue,
                        };

                        return result;
                    },
                    PropertyName = "HasUniqueValue",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "FieldType should return same 'fieldType' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.FieldType,
                        };

                        return result;
                    },
                    PropertyName = "FieldType",
                })
            .AddScenario(() =>
                new ConstructorPropertyAssignmentTestScenario<PropertyModelV3>
                {
                    Name = "FormField should return same 'formField' parameter passed to constructor when getting",
                    SystemUnderTestExpectedPropertyValueFunc = () =>
                    {
                        var referenceObject = A.Dummy<PropertyModelV3>();

                        var result = new SystemUnderTestExpectedPropertyValue<PropertyModelV3>
                        {
                            SystemUnderTest = new PropertyModelV3(
                                                      referenceObject.GroupName,
                                                      referenceObject.Hidden,
                                                      referenceObject.ModificationMetadataModel,
                                                      referenceObject.Name,
                                                      referenceObject.DisplayOrder,
                                                      referenceObject.Options,
                                                      referenceObject.Label,
                                                      referenceObject.Type,
                                                      referenceObject.HasUniqueValue,
                                                      referenceObject.FieldType,
                                                      referenceObject.FormField),
                            ExpectedPropertyValue = referenceObject.FormField,
                        };

                        return result;
                    },
                    PropertyName = "FormField",
                });

        private static readonly DeepCloneWithTestScenarios<PropertyModelV3> DeepCloneWithTestScenarios = new DeepCloneWithTestScenarios<PropertyModelV3>()
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithGroupName should deep clone object and replace GroupName with the provided groupName",
                    WithPropertyName = "GroupName",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.GroupName.IsEqualTo(_.GroupName));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.GroupName,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithHidden should deep clone object and replace Hidden with the provided hidden",
                    WithPropertyName = "Hidden",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.Hidden.IsEqualTo(_.Hidden));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Hidden,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithModificationMetadataModel should deep clone object and replace ModificationMetadataModel with the provided modificationMetadataModel",
                    WithPropertyName = "ModificationMetadataModel",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.ModificationMetadataModel.IsEqualTo(_.ModificationMetadataModel));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.ModificationMetadataModel,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithName should deep clone object and replace Name with the provided name",
                    WithPropertyName = "Name",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.Name.IsEqualTo(_.Name));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Name,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithDisplayOrder should deep clone object and replace DisplayOrder with the provided displayOrder",
                    WithPropertyName = "DisplayOrder",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.DisplayOrder.IsEqualTo(_.DisplayOrder));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.DisplayOrder,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithOptions should deep clone object and replace Options with the provided options",
                    WithPropertyName = "Options",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.Options.IsEqualTo(_.Options));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Options,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithLabel should deep clone object and replace Label with the provided label",
                    WithPropertyName = "Label",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.Label.IsEqualTo(_.Label));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Label,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithHasUniqueValue should deep clone object and replace HasUniqueValue with the provided hasUniqueValue",
                    WithPropertyName = "HasUniqueValue",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.HasUniqueValue.IsEqualTo(_.HasUniqueValue));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.HasUniqueValue,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithType should deep clone object and replace Type with the provided type",
                    WithPropertyName = "Type",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.Type.IsEqualTo(_.Type));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.Type,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithFieldType should deep clone object and replace FieldType with the provided fieldType",
                    WithPropertyName = "FieldType",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.FieldType.IsEqualTo(_.FieldType));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FieldType,
                        };

                        return result;
                    },
                })
            .AddScenario(() =>
                new DeepCloneWithTestScenario<PropertyModelV3>
                {
                    Name = "DeepCloneWithFormField should deep clone object and replace FormField with the provided formField",
                    WithPropertyName = "FormField",
                    SystemUnderTestDeepCloneWithValueFunc = () =>
                    {
                        var systemUnderTest = A.Dummy<PropertyModelV3>();

                        var referenceObject = A.Dummy<PropertyModelV3>().ThatIs(_ => !systemUnderTest.FormField.IsEqualTo(_.FormField));

                        var result = new SystemUnderTestDeepCloneWithValue<PropertyModelV3>
                        {
                            SystemUnderTest = systemUnderTest,
                            DeepCloneWithValue = referenceObject.FormField,
                        };

                        return result;
                    },
                });

        private static readonly PropertyModelV3 ReferenceObjectForEquatableTestScenarios = A.Dummy<PropertyModelV3>();

        private static readonly EquatableTestScenarios<PropertyModelV3> EquatableTestScenarios = new EquatableTestScenarios<PropertyModelV3>()
            .AddScenario(() =>
                new EquatableTestScenario<PropertyModelV3>
                {
                    Name = "Default Code Generated Scenario",
                    ReferenceObject = ReferenceObjectForEquatableTestScenarios,
                    ObjectsThatAreEqualToButNotTheSameAsReferenceObject = new PropertyModelV3[]
                    {
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                    },
                    ObjectsThatAreNotEqualToReferenceObject = new PropertyModelV3[]
                    {
                        new PropertyModelV3(
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.GroupName.IsEqualTo(ReferenceObjectForEquatableTestScenarios.GroupName)).GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.Hidden.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Hidden)).Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.ModificationMetadataModel.IsEqualTo(ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel)).ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.Name.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Name)).Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.DisplayOrder.IsEqualTo(ReferenceObjectForEquatableTestScenarios.DisplayOrder)).DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.Options.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Options)).Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.Label.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Label)).Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.HasUniqueValue.IsEqualTo(ReferenceObjectForEquatableTestScenarios.HasUniqueValue)).HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.Type.IsEqualTo(ReferenceObjectForEquatableTestScenarios.Type)).Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.FieldType.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FieldType)).FieldType,
                                ReferenceObjectForEquatableTestScenarios.FormField),
                        new PropertyModelV3(
                                ReferenceObjectForEquatableTestScenarios.GroupName,
                                ReferenceObjectForEquatableTestScenarios.Hidden,
                                ReferenceObjectForEquatableTestScenarios.ModificationMetadataModel,
                                ReferenceObjectForEquatableTestScenarios.Name,
                                ReferenceObjectForEquatableTestScenarios.DisplayOrder,
                                ReferenceObjectForEquatableTestScenarios.Options,
                                ReferenceObjectForEquatableTestScenarios.Label,
                                ReferenceObjectForEquatableTestScenarios.Type,
                                ReferenceObjectForEquatableTestScenarios.HasUniqueValue,
                                ReferenceObjectForEquatableTestScenarios.FieldType,
                                A.Dummy<PropertyModelV3>().Whose(_ => !_.FormField.IsEqualTo(ReferenceObjectForEquatableTestScenarios.FormField)).FormField),
                    },
                    ObjectsThatAreNotOfTheSameTypeAsReferenceObject = new object[]
                    {
                        A.Dummy<object>(),
                        A.Dummy<string>(),
                        A.Dummy<int>(),
                        A.Dummy<int?>(),
                        A.Dummy<Guid>(),
                    },
                });

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Structural
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void PropertyModelV3___Should_implement_IModel_of_PropertyModelV3___When_reflecting()
            {
                // Arrange
                var type = typeof(PropertyModelV3);

                var expectedModelMethods = typeof(IModel<PropertyModelV3>).GetInterfaceDeclaredAndImplementedMethods();

                var expectedModelMethodHashes = expectedModelMethods.Select(_ => _.GetSignatureHash());

                // Act
                var actualInterfaces = type.GetInterfaces();
                var actualModelMethods = type.GetMethodsFiltered(MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public).ToList();
                var actualModelMethodHashes = actualModelMethods.Select(_ => _.GetSignatureHash());

                // Assert
                actualInterfaces.AsTest().Must().ContainElement(typeof(IModel<PropertyModelV3>));
                expectedModelMethodHashes.Except(actualModelMethodHashes).AsTest().Must().BeEmptyEnumerable();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void PropertyModelV3___Should_be_attributed_with_Serializable____When_reflecting()
            {
                // Arrange
                var type = typeof(PropertyModelV3);

                // Act
                var actualAttributes = type.GetCustomAttributes(typeof(SerializableAttribute), false);

                // Assert
                actualAttributes.AsTest().Must().NotBeEmptyEnumerable();
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class StringRepresentation
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void ToString___Should_generate_friendly_string_representation_of_object___When_called()
            {
                var scenarios = StringRepresentationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.SystemUnderTest.ToString();

                    // Assert
                    actual.AsTest().Must().BeEqualTo(scenario.ExpectedStringRepresentation, because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Constructing
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Constructor___Should_throw___When_parameters_are_not_valid()
            {
                var scenarios = ConstructorArgumentValidationTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = Record.Exception(scenario.ConstructionFunc);

                    // Assert
                    actual.AsTest().Must().BeOfType(scenario.ExpectedExceptionType, because: scenario.Id);

                    foreach(var expected in scenario.ExpectedExceptionMessageContains ?? new List<string>())
                    {
                        actual.Message.AsTest().Must().ContainString(expected, because: scenario.Id);
                    }

                    if (scenario.ExpectedExceptionMessageEquals != null)
                    {
                        actual.Message.AsTest().Must().BeEqualTo(scenario.ExpectedExceptionMessageEquals, because: scenario.Id);
                    }
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "referenceObject")]
            public static void Properties___Should_be_assigned_by_constructor_to_expected_value___When_getting()
            {
                var scenarios = ConstructorPropertyAssignmentTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if ((scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.NoPropertiesAssignedInConstructorScenarioPropertyName) || (scenario.PropertyName == ConstructorPropertyAssignmentTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioPropertyName))
                    {
                        continue;
                    }

                    // Act
                    var actual = scenario.Property.GetValue(scenario.SystemUnderTest);

                    // Assert
                    if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ValueEquality)
                    {
                        var propertyType = scenario.Property.PropertyType;

                        // Use reflection to call: actual.AsTest().Must().BeEqualTo(scenario.ExpectedPropertyValue, because: scenario.Id)
                        // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                        // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                        // Here 'scenario.ExpectedPropertyValue' and 'actual' are declared as typeof(object).
                        // With the exception of some specific boxed types (e.g. value types, string),
                        // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                        // We want to use the property's real type, 'scenario.Property.PropertyType'.
                        // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                        // object x = Dictionary<string, string>();
                        // object y = Dictionary<string, string>();
                        var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actual, Type.Missing })).Must();

                        var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                        invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, scenario.ExpectedPropertyValue, scenario.Id, Type.Missing, Type.Missing });
                    }
                    else if (scenario.CompareActualToExpectedUsing == CompareActualToExpectedUsing.ReferenceEquality)
                    {
                        actual.AsTest().Must().BeSameReferenceAs(scenario.ExpectedPropertyValue, because: scenario.Id);
                    }
                    else
                    {
                        throw new NotSupportedException("This CompareActualToExpectedUsing is not supported: " + scenario.CompareActualToExpectedUsing);
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Cloning
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Clone___Should_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<PropertyModelV3>();

                // Act
                var actual = (PropertyModelV3)systemUnderTest.Clone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepClone___Should_deep_clone_object___When_called()
            {
                // Arrange
                var systemUnderTest = A.Dummy<PropertyModelV3>();

                // Act
                var actual = systemUnderTest.DeepClone();

                // Assert
                actual.AsTest().Must().BeEqualTo(systemUnderTest);
                actual.AsTest().Must().NotBeSameReferenceAs(systemUnderTest);

                if (systemUnderTest.ModificationMetadataModel == null)
                {
                    actual.ModificationMetadataModel.AsTest().Must().BeNull();
                }
                else
                {
                    actual.ModificationMetadataModel.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.ModificationMetadataModel);
                }

                if (systemUnderTest.Options == null)
                {
                    actual.Options.AsTest().Must().BeNull();
                }
                else
                {
                    actual.Options.AsTest().Must().NotBeSameReferenceAs(systemUnderTest.Options);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void DeepCloneWith___Should_deep_clone_object_and_replace_the_associated_property_with_the_provided_value___When_called()
            {
                var propertyNames = new string[] { "GroupName", "Hidden", "ModificationMetadataModel", "Name", "DisplayOrder", "Options", "Label", "HasUniqueValue", "Type", "FieldType", "FormField" };

                var scenarios = DeepCloneWithTestScenarios.ValidateAndPrepareForTesting();

                var obcAssertionAsTestMethod = typeof(WorkflowExtensions).GetMethodFiltered(nameof(WorkflowExtensions.AsTest), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                var obcAssertionBeEqualToMethod = typeof(Verifications).GetMethodFiltered(nameof(Verifications.BeEqualTo), MemberRelationships.DeclaredInType, MemberOwners.Static, MemberAccessModifiers.Public);

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    if (scenario.WithPropertyName == DeepCloneWithTestScenario.ForceGeneratedTestsToPassAndWriteMyOwnScenarioWithPropertyName)
                    {
                        continue;
                    }

                    // Act
                    var actual = (PropertyModelV3)scenario.DeepCloneWithMethod.Invoke(scenario.SystemUnderTest, new[] { scenario.WithValue });

                    // Assert
                    foreach(var propertyName in propertyNames)
                    {
                        var propertyInfo = typeof(PropertyModelV3).GetPropertyFiltered(propertyName, MemberRelationships.DeclaredOrInherited, MemberOwners.Instance, MemberAccessModifiers.Public);

                        var propertyType = propertyInfo.PropertyType;

                        var actualPropertyValue = propertyInfo.GetValue(actual);

                        if (propertyName == scenario.WithPropertyName)
                        {
                            if (propertyType.IsValueType)
                            {
                                actualPropertyValue.AsTest().Must().BeEqualTo(scenario.WithValue, because: scenario.Id);
                            }
                            else
                            {
                                actualPropertyValue.AsTest().Must().BeSameReferenceAs(scenario.WithValue, because: scenario.Id);
                            }
                        }
                        else
                        {
                            var systemUnderTestPropertyValue = propertyInfo.GetValue(scenario.SystemUnderTest);

                            // Use reflection to call: actualPropertyValue.AsTest().Must().BeEqualTo(systemUnderTestPropertyValue, because: scenario.Id)
                            // We need to use reflection here to specify the 'subject' and 'comparisonValue' types.
                            // BeEqualTo() uses declared types and not runtime types to identify the contract to use for equality.
                            // Here 'systemUnderTestPropertyValue' and 'actualPropertyValue' are declared as typeof(object).
                            // With the exception of some specific boxed types (e.g. value types, string),
                            // BeEqualTo() uses reference equality to compare two objects declared as typeof(object).
                            // We want to use the property's real type, 'property.PropertyType'.
                            // For example, BeEqualTo() returns false for these two dictionaries because their declared type is typeof(object):
                            // object x = Dictionary<string, string>();
                            // object y = Dictionary<string, string>();
                            var assertionTracker = ((AssertionTracker)obcAssertionAsTestMethod.MakeGenericMethod(propertyType).Invoke(null, new[] { actualPropertyValue, Type.Missing })).Must();

                            var invokeableObcAssertionBeEqualToMethod = obcAssertionBeEqualToMethod.MakeGenericMethod(propertyType);

                            invokeableObcAssertionBeEqualToMethod.Invoke(null, new object[] { assertionTracker, systemUnderTestPropertyValue, scenario.Id, Type.Missing, Type.Missing });

                            if ((!propertyType.IsValueType) && (propertyType != typeof(string)) && (systemUnderTestPropertyValue != null))
                            {
                                actualPropertyValue.AsTest().Must().NotBeSameReferenceAs(systemUnderTestPropertyValue, because: scenario.Id);
                            }
                        }
                    }
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Serialization
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<PropertyModelV3>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcBsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<PropertyModelV3>();

                var serializationConfigurationType = SerializationConfigurationTypes.BsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaBsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_string_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<PropertyModelV3>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.String };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Deserialize___Should_roundtrip_object___When_serializing_to_and_deserializing_from_bytes_using_ObcJsonSerializer()
            {
                // Arrange
                var expected = A.Dummy<PropertyModelV3>();

                var serializationConfigurationType = SerializationConfigurationTypes.JsonSerializationConfigurationType.ConcreteSerializationConfigurationDerivativeType;

                var serializationFormats = new[] { SerializationFormat.Binary };

                var appDomainScenarios = AppDomainScenarios.RoundtripInCurrentAppDomain | AppDomainScenarios.SerializeInCurrentAppDomainAndDeserializeInNewAppDomain;

                // Act, Assert
                expected.RoundtripSerializeViaJsonWithBeEqualToAssertion(serializationConfigurationType, serializationFormats, appDomainScenarios);
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Equality
        {
            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_both_sides_of_operator_are_null()
            {
                // Arrange
                PropertyModelV3 systemUnderTest1 = null;
                PropertyModelV3 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 == systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeTrue();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    PropertyModelV3 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest == scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject == systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeFalse(because: scenario.Id);
                    actual2.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject == scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void EqualsOperator___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject == _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ == scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_both_sides_of_operator_are_null()
            {
                // Arrange
                PropertyModelV3 systemUnderTest1 = null;
                PropertyModelV3 systemUnderTest2 = null;

                // Act
                var actual = systemUnderTest1 != systemUnderTest2;

                // Assert
                actual.AsTest().Must().BeFalse();
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_one_side_of_operator_is_null_and_the_other_side_is_not_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    PropertyModelV3 systemUnderTest = null;

                    // Act
                    var actual1 = systemUnderTest != scenario.ReferenceObject;
                    var actual2 = scenario.ReferenceObject != systemUnderTest;

                    // Assert
                    actual1.AsTest().Must().BeTrue(because: scenario.Id);
                    actual2.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_same_object_is_on_both_sides_of_operator()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    #pragma warning disable CS1718 // Comparison made to same variable
                    var actual = scenario.ReferenceObject != scenario.ReferenceObject;
                    #pragma warning restore CS1718 // Comparison made to same variable

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_derive_from_the_same_type_but_are_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_true___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeTrue(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void NotEqualsOperator___Should_return_false___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject != _).ToList();
                    var actuals2 = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _ != scenario.ReferenceObject).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_PropertyModelV3___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange
                    PropertyModelV3 systemUnderTest = null;

                    // Act
                    var actual = scenario.ReferenceObject.Equals(systemUnderTest);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_PropertyModelV3___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals(scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_PropertyModelV3___Should_return_false___When_parameter_other_is_derived_from_the_same_type_but_is_not_of_the_same_type_as_this_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_PropertyModelV3___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_PropertyModelV3___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals(_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_null()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)null);

                    // Assert
                    actual.AsTest().Must().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_parameter_other_is_not_of_the_same_type()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals1 = scenario.ObjectsThatDeriveFromScenarioTypeButAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();
                    var actuals2 = scenario.ObjectsThatAreNotOfTheSameTypeAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals1.AsTest().Must().Each().BeFalse(because: scenario.Id);
                    actuals2.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_parameter_other_is_same_object()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actual = scenario.ReferenceObject.Equals((object)scenario.ReferenceObject);

                    // Assert
                    actual.AsTest().Must().BeTrue(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_false___When_objects_being_compared_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeFalse(because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void Equals_with_Object___Should_return_true___When_objects_being_compared_have_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => scenario.ReferenceObject.Equals((object)_)).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeTrue(because: scenario.Id);
                }
            }
        }

        [SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [SuppressMessage("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
        public static class Hashing
        {
            [Fact(Skip = "It's possible (and even probable after a few runs of this test) that two dummy, unequal models will have the same hash code.  The model being tested contains at least one property who's type (or a type nested within the generic type, or a property of the IModel type) is a dictionary with keys that are not comparable or an unordered collection with elements that are not comparable.  In these cases the hashing method cannot hash the elements and must resort to hashing the element count.  Two dummies could easily have the same element count for such a type.")]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_not_be_equal_for_two_objects___When_objects_have_different_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var unexpected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreNotEqualToReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().NotContainElement(unexpected, because: scenario.Id);
                }
            }

            [Fact]
            [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
            [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
            [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
            [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
            [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
            [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
            [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
            [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
            [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
            public static void GetHashCode___Should_be_equal_for_two_objects___When_objects_have_the_same_property_values()
            {
                var scenarios = EquatableTestScenarios.ValidateAndPrepareForTesting();

                foreach (var scenario in scenarios)
                {
                    // Arrange, Act
                    var expected = scenario.ReferenceObject.GetHashCode();

                    var actuals = scenario.ObjectsThatAreEqualToButNotTheSameAsReferenceObject.Select(_ => _.GetHashCode()).ToList();

                    // Assert
                    actuals.AsTest().Must().Each().BeEqualTo(expected, because: scenario.Id);
                }
            }
        }
    }
}