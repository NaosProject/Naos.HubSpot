// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.127.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.HubSpot.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class PropertyModelV3 : IModel<PropertyModelV3>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="PropertyModelV3"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(PropertyModelV3 left, PropertyModelV3 right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="PropertyModelV3"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(PropertyModelV3 left, PropertyModelV3 right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(PropertyModelV3 other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.GroupName.IsEqualTo(other.GroupName, StringComparer.Ordinal)
                      && this.Hidden.IsEqualTo(other.Hidden)
                      && this.ModificationMetadataModel.IsEqualTo(other.ModificationMetadataModel)
                      && this.Name.IsEqualTo(other.Name, StringComparer.Ordinal)
                      && this.DisplayOrder.IsEqualTo(other.DisplayOrder)
                      && this.Options.IsEqualTo(other.Options)
                      && this.Label.IsEqualTo(other.Label, StringComparer.Ordinal)
                      && this.HasUniqueValue.IsEqualTo(other.HasUniqueValue)
                      && this.Type.IsEqualTo(other.Type, StringComparer.Ordinal)
                      && this.FieldType.IsEqualTo(other.FieldType, StringComparer.Ordinal)
                      && this.FormField.IsEqualTo(other.FormField);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as PropertyModelV3);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.GroupName)
            .Hash(this.Hidden)
            .Hash(this.ModificationMetadataModel)
            .Hash(this.Name)
            .Hash(this.DisplayOrder)
            .Hash(this.Options)
            .Hash(this.Label)
            .Hash(this.HasUniqueValue)
            .Hash(this.Type)
            .Hash(this.FieldType)
            .Hash(this.FormField)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public PropertyModelV3 DeepClone()
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="GroupName" />.
        /// </summary>
        /// <param name="groupName">The new <see cref="GroupName" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="groupName" /> for <see cref="GroupName" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithGroupName(string groupName)
        {
            var result = new PropertyModelV3(
                                 groupName,
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Hidden" />.
        /// </summary>
        /// <param name="hidden">The new <see cref="Hidden" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="hidden" /> for <see cref="Hidden" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithHidden(bool hidden)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ModificationMetadataModel" />.
        /// </summary>
        /// <param name="modificationMetadataModel">The new <see cref="ModificationMetadataModel" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="modificationMetadataModel" /> for <see cref="ModificationMetadataModel" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithModificationMetadataModel(ModificationMetadataModel modificationMetadataModel)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 modificationMetadataModel,
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Name" />.
        /// </summary>
        /// <param name="name">The new <see cref="Name" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="name" /> for <see cref="Name" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithName(string name)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 name,
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="DisplayOrder" />.
        /// </summary>
        /// <param name="displayOrder">The new <see cref="DisplayOrder" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="displayOrder" /> for <see cref="DisplayOrder" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithDisplayOrder(long displayOrder)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 displayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Options" />.
        /// </summary>
        /// <param name="options">The new <see cref="Options" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="options" /> for <see cref="Options" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithOptions(IReadOnlyCollection<OptionModel> options)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 options,
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Label" />.
        /// </summary>
        /// <param name="label">The new <see cref="Label" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="label" /> for <see cref="Label" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithLabel(string label)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 label,
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="HasUniqueValue" />.
        /// </summary>
        /// <param name="hasUniqueValue">The new <see cref="HasUniqueValue" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="hasUniqueValue" /> for <see cref="HasUniqueValue" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithHasUniqueValue(bool hasUniqueValue)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 hasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Type" />.
        /// </summary>
        /// <param name="type">The new <see cref="Type" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="type" /> for <see cref="Type" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithType(string type)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 type,
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FieldType" />.
        /// </summary>
        /// <param name="fieldType">The new <see cref="FieldType" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="fieldType" /> for <see cref="FieldType" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithFieldType(string fieldType)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 fieldType,
                                 this.FormField);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FormField" />.
        /// </summary>
        /// <param name="formField">The new <see cref="FormField" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="PropertyModelV3" /> using the specified <paramref name="formField" /> for <see cref="FormField" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public PropertyModelV3 DeepCloneWithFormField(bool formField)
        {
            var result = new PropertyModelV3(
                                 this.GroupName?.Clone().ToString(),
                                 this.Hidden,
                                 this.ModificationMetadataModel?.DeepClone(),
                                 this.Name?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.Options?.Select(i => i?.DeepClone()).ToList(),
                                 this.Label?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.HasUniqueValue,
                                 this.FieldType?.Clone().ToString(),
                                 formField);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Naos.HubSpot.Domain.PropertyModelV3: GroupName = {this.GroupName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Hidden = {this.Hidden.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ModificationMetadataModel = {this.ModificationMetadataModel?.ToString() ?? "<null>"}, Name = {this.Name?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DisplayOrder = {this.DisplayOrder.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Options = {this.Options?.ToString() ?? "<null>"}, Label = {this.Label?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, HasUniqueValue = {this.HasUniqueValue.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Type = {this.Type?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FieldType = {this.FieldType?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FormField = {this.FormField.ToString(CultureInfo.InvariantCulture) ?? "<null>"}.");

            return result;
        }
    }
}