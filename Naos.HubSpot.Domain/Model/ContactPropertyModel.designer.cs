// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.127.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.HubSpot.Domain
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    [Serializable]
    public partial class ContactPropertyModel : IModel<ContactPropertyModel>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="ContactPropertyModel"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(ContactPropertyModel left, ContactPropertyModel right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="ContactPropertyModel"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(ContactPropertyModel left, ContactPropertyModel right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(ContactPropertyModel other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.Name.IsEqualTo(other.Name, StringComparer.Ordinal)
                      && this.Label.IsEqualTo(other.Label, StringComparer.Ordinal)
                      && this.GroupName.IsEqualTo(other.GroupName, StringComparer.Ordinal)
                      && this.Type.IsEqualTo(other.Type, StringComparer.Ordinal)
                      && this.FieldType.IsEqualTo(other.FieldType, StringComparer.Ordinal)
                      && this.Deleted.IsEqualTo(other.Deleted)
                      && this.DisplayOrder.IsEqualTo(other.DisplayOrder)
                      && this.ReadOnlyValue.IsEqualTo(other.ReadOnlyValue)
                      && this.ReadOnlyDefinition.IsEqualTo(other.ReadOnlyDefinition, StringComparer.Ordinal)
                      && this.Hidden.IsEqualTo(other.Hidden)
                      && this.Calculated.IsEqualTo(other.Calculated)
                      && this.ExternalOptions.IsEqualTo(other.ExternalOptions)
                      && this.DisplayMode.IsEqualTo(other.DisplayMode, StringComparer.Ordinal)
                      && this.FormField.IsEqualTo(other.FormField, StringComparer.Ordinal);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as ContactPropertyModel);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.Name)
            .Hash(this.Label)
            .Hash(this.GroupName)
            .Hash(this.Type)
            .Hash(this.FieldType)
            .Hash(this.Deleted)
            .Hash(this.DisplayOrder)
            .Hash(this.ReadOnlyValue)
            .Hash(this.ReadOnlyDefinition)
            .Hash(this.Hidden)
            .Hash(this.Calculated)
            .Hash(this.ExternalOptions)
            .Hash(this.DisplayMode)
            .Hash(this.FormField)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public ContactPropertyModel DeepClone()
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Name" />.
        /// </summary>
        /// <param name="name">The new <see cref="Name" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="name" /> for <see cref="Name" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithName(string name)
        {
            var result = new ContactPropertyModel(
                                 name,
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Label" />.
        /// </summary>
        /// <param name="label">The new <see cref="Label" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="label" /> for <see cref="Label" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithLabel(string label)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 label,
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="GroupName" />.
        /// </summary>
        /// <param name="groupName">The new <see cref="GroupName" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="groupName" /> for <see cref="GroupName" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithGroupName(string groupName)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 groupName,
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Type" />.
        /// </summary>
        /// <param name="type">The new <see cref="Type" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="type" /> for <see cref="Type" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithType(string type)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 type,
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FieldType" />.
        /// </summary>
        /// <param name="fieldType">The new <see cref="FieldType" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="fieldType" /> for <see cref="FieldType" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithFieldType(string fieldType)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 fieldType,
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Deleted" />.
        /// </summary>
        /// <param name="deleted">The new <see cref="Deleted" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="deleted" /> for <see cref="Deleted" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithDeleted(bool? deleted)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="DisplayOrder" />.
        /// </summary>
        /// <param name="displayOrder">The new <see cref="DisplayOrder" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="displayOrder" /> for <see cref="DisplayOrder" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithDisplayOrder(int? displayOrder)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 displayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyValue" />.
        /// </summary>
        /// <param name="readOnlyValue">The new <see cref="ReadOnlyValue" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="readOnlyValue" /> for <see cref="ReadOnlyValue" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithReadOnlyValue(bool? readOnlyValue)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 readOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ReadOnlyDefinition" />.
        /// </summary>
        /// <param name="readOnlyDefinition">The new <see cref="ReadOnlyDefinition" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="readOnlyDefinition" /> for <see cref="ReadOnlyDefinition" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithReadOnlyDefinition(string readOnlyDefinition)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 readOnlyDefinition,
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Hidden" />.
        /// </summary>
        /// <param name="hidden">The new <see cref="Hidden" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="hidden" /> for <see cref="Hidden" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithHidden(bool? hidden)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Calculated" />.
        /// </summary>
        /// <param name="calculated">The new <see cref="Calculated" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="calculated" /> for <see cref="Calculated" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithCalculated(bool? calculated)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ExternalOptions" />.
        /// </summary>
        /// <param name="externalOptions">The new <see cref="ExternalOptions" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="externalOptions" /> for <see cref="ExternalOptions" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithExternalOptions(bool? externalOptions)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 externalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="DisplayMode" />.
        /// </summary>
        /// <param name="displayMode">The new <see cref="DisplayMode" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="displayMode" /> for <see cref="DisplayMode" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithDisplayMode(string displayMode)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 displayMode,
                                 this.FormField?.Clone().ToString(),
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="FormField" />.
        /// </summary>
        /// <param name="formField">The new <see cref="FormField" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="ContactPropertyModel" /> using the specified <paramref name="formField" /> for <see cref="FormField" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
        public ContactPropertyModel DeepCloneWithFormField(string formField)
        {
            var result = new ContactPropertyModel(
                                 this.Name?.Clone().ToString(),
                                 this.Label?.Clone().ToString(),
                                 this.GroupName?.Clone().ToString(),
                                 this.Type?.Clone().ToString(),
                                 this.FieldType?.Clone().ToString(),
                                 this.DisplayOrder,
                                 this.ReadOnlyDefinition?.Clone().ToString(),
                                 this.DisplayMode?.Clone().ToString(),
                                 formField,
                                 this.Deleted,
                                 this.ReadOnlyValue,
                                 this.Hidden,
                                 this.Calculated,
                                 this.ExternalOptions);

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string ToString()
        {
            var result = Invariant($"Naos.HubSpot.Domain.ContactPropertyModel: Name = {this.Name?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Label = {this.Label?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, GroupName = {this.GroupName?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Type = {this.Type?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FieldType = {this.FieldType?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Deleted = {this.Deleted?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DisplayOrder = {this.DisplayOrder?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ReadOnlyValue = {this.ReadOnlyValue?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ReadOnlyDefinition = {this.ReadOnlyDefinition?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Hidden = {this.Hidden?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, Calculated = {this.Calculated?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, ExternalOptions = {this.ExternalOptions?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, DisplayMode = {this.DisplayMode?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}, FormField = {this.FormField?.ToString(CultureInfo.InvariantCulture) ?? "<null>"}.");

            return result;
        }
    }
}